rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Hilfsfunktionen
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function hasValidFields(requiredFields) {
      return request.resource.data.keys().hasAll(requiredFields) 
        && request.resource.data.keys().hasOnly(requiredFields);
    }

    // Shop-Produkte
    match /shop-products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Events
    match /events/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Blog
    match /blogs/{blogId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Benutzer
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && hasValidFields(['email', 'displayName', 'role', 'createdAt']);
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Produktschlüssel
    match /productKeys/{keyId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAuthenticated() && hasValidFields(['userId', 'productId', 'key', 'createdAt', 'isActive']);
      allow update: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
      allow delete: if isAdmin();
    }

    // Support-Chats
    match /support_chats/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        hasValidFields(['senderId', 'message', 'timestamp', 'type']);
      allow update, delete: if isAdmin();
    }

    // Chats
    match /chats/{chatId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         resource.data.adminEmail == request.auth.token.email);
      
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          get(/databases/$(database)/documents/chats/$(chatId)).data.userId == request.auth.uid ||
          get(/databases/$(database)/documents/chats/$(chatId)).data.adminEmail == request.auth.token.email;
        allow create: if isAuthenticated() && 
          hasValidFields(['senderId', 'message', 'timestamp', 'type']);
      }
    }

    // Kurse
    match /courses/{courseId} {
      allow read: if true;
      allow write: if isAdmin();

      match /lessons/{lessonId} {
        allow read: if isAuthenticated() && 
          exists(/databases/$(database)/documents/productKeys/$(request.auth.uid));
        allow write: if isAdmin();
      }
    }

    // FAQ
    match /faqs/{faqId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Standardregel für alle anderen Dokumente
    match /{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
} 